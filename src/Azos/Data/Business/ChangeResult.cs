/*<FILE_LICENSE>
 * Azos (A to Z Application Operating System) Framework
 * The A to Z Foundation (a.k.a. Azist) licenses this file to you under the MIT license.
 * See the LICENSE file in the project root for more information.
</FILE_LICENSE>*/

using System.Collections;
using System.IO;

using Azos.Serialization.JSON;

namespace Azos.Data.Business
{
  /// <summary>
  /// Describes data change operation result: {ChangeType, AffectedCount, Message, Data}
  /// </summary>
  public struct ChangeResult : IJsonWritable, IJsonReadable
  {
    /// <summary>
    /// Change types: Inserted/Updated/Upserted/Deleted
    /// </summary>
    public enum ChangeType
    {
      Undefined = 0,
      Inserted,
      Updated,
      Upserted,
      Deleted
    }

    /// <summary>
    /// Describes data change operation result: Inserted/Deleted/etc.., rows affected, extra data etc.
    /// </summary>
    /// <param name="change">Change type: Inserted/Updated...</param>
    /// <param name="affectedCount">Affected entity count</param>
    /// <param name="msg">Optional message from the serving party</param>
    /// <param name="data">Returns optional extra data which is returned from the data change operation</param>
    public ChangeResult(ChangeType change, long affectedCount, string msg, object data)
    {
      Change = change;
      AffectedCount = affectedCount;
      Message = msg;
      Data = data;
    }

    /// <summary>
    /// Describes data change operation result: Inserted/Deleted/etc.., rows affected, extra data etc.
    /// Creates instance from JsonDataMap dictionary.
    /// </summary>
    /// <param name="map">Non-null map with keys: {change, affected, message, data}</param>
    public ChangeResult(JsonDataMap map)
    {
      map.NonNull(nameof(map));
      Change        = map["change"].AsEnum(ChangeType.Undefined);
      AffectedCount = map["affected"].AsLong();
      Message       = map["message"].AsString();
      Data          = map["data"];
    }

    /// <summary> Specifies the change type Insert/Update/Delete etc.. </summary>
    public readonly ChangeType Change;

    /// <summary> How many entities/rows/docs was/were affected by the change </summary>
    public readonly long AffectedCount;

    /// <summary> Provides an optional message from the serving party </summary>
    public readonly string Message;

    /// <summary>
    /// Attaches optional extra data which is returned from the data change operation,
    /// for example a posted sale may return an OrderId object generated by the target store
    /// </summary>
    public readonly object Data;

    /// <summary>
    /// Writes this ChangeResult as a typical JSON object like: {OK: true, change: Inserted ... }
    /// </summary>
    void IJsonWritable.WriteAsJson(TextWriter wri, int nestingLevel, JsonWritingOptions options)
    {
      JsonWriter.WriteMap(wri, nestingLevel, options,
                    new DictionaryEntry("OK", true),
                    new DictionaryEntry("change", Change),
                    new DictionaryEntry("affected", AffectedCount),
                    new DictionaryEntry("message", Message),
                    new DictionaryEntry("data", Data)
                   );
    }

    /// <summary>
    /// Reads ChangeREsult back from JSON
    /// </summary>
    public (bool match, IJsonReadable self) ReadAsJson(object data, bool fromUI, JsonReader.DocReadOptions? options)
    {
      if (data is JsonDataMap map && map["OK"].AsBool())
        return (true, new ChangeResult(map));

      return (false, null);
    }
  }
}
